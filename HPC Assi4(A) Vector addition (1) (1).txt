1) !nvcc --version
2) !pip install git+https://github.com/andreinechaev/nvcc4jupyter.git
3) %load_ext nvcc_plugin




%%cu
#include<stdio.h> 
#include<iostream> 
#include<cstdlib> 
#include<omp.h>
#define MAX 10  
using namespace std; 
int main() 
{ 
 int a[MAX],b[MAX],c[MAX];
 int i;
 printf("\n First Vector:\t"); 
 //Instruct a master thread to fork and generate more threads to process following loop structure 
#pragma omp parallel 
for(i=0;i<MAX;i++) 
 { 
 a[i]=rand()%1000; 
 } 
 /*Discuss issue of this for loop below-if we make i parallel, possibly values that get printed will 
not be in sequence as we dont have any control on order of threads execution*/
for(i=0;i<MAX;i++) 
 { 
printf("%d\t",a[i]); 
 } 
 printf("\n Second Vector:\t"); 
 #pragma omp parallel 
 for(i=0;i<MAX;i++) 
 { 
 b[i]=rand()%1000; 
 } 
 for(i=0;i<MAX;i++) 
 { 
 printf("%d\t",b[i]); 
 } 
 printf("\n Parallel-Vector Addition:(a,b,c)\t"); 
 #pragma omp parallel for 
 for(i=0;i<MAX;i++) 
 { c[i]=a[i]+b[i]; 
 
 } 
 for(i=0;i<MAX;i++) 
 { 
 printf("\n%d\t%d\t%d",a[i],b[i],c[i]); 
 } 
} 